var Asker = require('../lib/asker'),
    httpTest = require('./lib/http'),
    assert = require('chai').assert;

module.exports = {
    '#getUrl() should returns requested URL built from host, port and path options' : function() {
        var HOST = 'yandex.com',
            PORT = '443',
            PATH = '/search',
            request = new Asker({
                host : HOST,
                port : PORT,
                path : PATH
            });

        assert.strictEqual(request.getUrl(), HOST + ':' + PORT + PATH,
            'url generated by Asker#getUrl is correct');
    },

    '#done() should call callback if passed to constructor' : function(done) {
        var ERROR = new Error('error'),
            RESPONSE = 'ok',

            request = new Asker({}, function(error, response) {
                assert.strictEqual(error, ERROR,
                    'error argument passed to callback');

                assert.strictEqual(response, RESPONSE,
                    'error argument passed to callback');

                done();
            });

        request.done(ERROR, RESPONSE);
    },

    '#done() should not trying to call undefined callback' : function() {
        var request = new Asker();

        assert.doesNotThrow(function() {
            request.done();
        });
    },

    '#done() should set #_isRunning flag to false' : function() {
        var request = new Asker();

        request._isRunning = true;

        assert.strictEqual(request._isRunning, true,
            '_isRunning was set to true manually');

        request.done();

        assert.strictEqual(request._isRunning, false,
            '_isRunning was set to false by #done() call');
    },

    '#getTimers() must returns `undefined` for not launched timers' : function() {
        var timers = (new Asker()).getTimers();

        assert.strictEqual(typeof timers.network, 'undefined',
            'network timer is undefined');

        assert.strictEqual(typeof timers.total, 'undefined',
            'total timer is undefined');
    },

    '#getTimers() returns timers values as the diff between operations start and end' : function() {
        var request = new Asker(),
            DELTA = 100;

        request._timeNetworkStart = Date.now();
        request._timeNetworkEnd = request._timeNetworkStart + DELTA;

        assert.strictEqual(request.getTimers().network, DELTA, 'network time is computed right');

        request._timeExecuteStart = Date.now();
        request._timeExecuteEnd = request._timeExecuteStart + DELTA;

        assert.strictEqual(request.getTimers().total, DELTA, 'total time is computed right');
    },

    '#execute set _timeExecuteStart' : function() {
        var request = new Asker();

        request.execute();

        assert.strictEqual(typeof request._timeExecuteStart, 'number', '#execute set _timeExecuteStart');
    },

    '#done set _timeExecuteEnd' : function() {
        var request = new Asker();

        request.done();

        assert.strictEqual(typeof request._timeExecuteEnd, 'number', '#done set _timeExecuteEnd');
    },

    '#getTimers returns `total` if #done was not called' : function() {
        var request = new Asker();

        request._timeExecuteStart = Date.now() - 10;

        assert.strictEqual(typeof request.getTimers().total, 'number', '#getTimers().total is number');
        assert.ok(request.getTimers().total > 0, '#getTimers().total is larger than 0');
    },

    'httpRequest `socket` event listener set _timeNetworkStart' : httpTest(function(done, server) {
        var request = new Asker({ port : server.port });

        server.addTest(function(req, res) {
            assert.strictEqual(typeof request._timeNetworkStart, 'number',
                '_timeNetworkStart is a number');

            res.end();

            done();
        });

        request.execute();
    }),

    '#getTimers returns `network` if _timeNetworkEnd was not set' : httpTest(function(done, server) {
        var request = new Asker({ port : server.port });

        server.addTest(function(req, res) {
            assert.strictEqual(typeof request.getTimers().network, 'number',
                '_timeNetworkStart is a number');

            res.end();

            done();
        });

        request.execute();
    }),

    'httpRequest `end` event listener set _timeNetworkEnd' : httpTest(function(done, server) {
        var request;

        server.addTest(function(req, res) {
            res.end();
        });

        request = new Asker({ port : server.port }, function() {
            assert.strictEqual(typeof request._timeNetworkEnd, 'number',
                '_timeNetworkEnd is a number');

            done();
        });

        request.execute();
    })
};
